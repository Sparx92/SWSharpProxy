using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using System.Security.Cryptography;

namespace SWSharpProxy.Parser
{
    public class Parser
    {
        private string ks_c2_char = "\x11\xc4?\xc4V\xeb&V\x90\xb4\x10\x89\xb4E\xfc\xe2Kv\xbcu\x91s\xe5=$\xab\x8aC|xv\x8a\x8c\xb8\xd3\r\x84\xbb*\x90V\xc5Y\xc4\x1d\x81,\xd9Q=4ke[.N\r\x16/\xa1\xb3PY\xfb\x92$o\xbcs\x04\xf5;\xfd\x03\xc8\xe1\xb2\xa34<\xfe_\xd2\xda!\x9fQn+t<\x9bCl\x8f\xd5\xd3\x9b\xc7\x19qc\x14\xc7\x0b\xc5(\t^M\x12h\xdd\x1c\xb6\x1c\xaf1u\xfb\x90\x10\xf4T<*\x7f\x99\xce\x8e\xfd\x0b\xabC\\\x9d\x1b\xf1\x848\xa0\xbc\"k\xed\xaeCH??\xff\xffGR)z\x91N\xf67&'\xbcG(]\xb6\x13\xc2\xb6Q\x0f\x9b?^\xff\x13w\x15l!V-f\xcc\x14H\xc0\x9c\x8a\xd7w\xbd.\xd7\xbc\xddg\xfb\xe1\x19i\xadqa~\xdeO\x8e\xd4]\xa0\xed\xd8\xb2\x90\xec\xa3\x95\xa1<f\xdc\xae\x1c\x98I\x06a\x84\xad\x1e\nn\xca\x14E\xfd\xfa\xba\xcc&\x1e\xd0\xafp\x81\xb5\x80\x173\xba_\x991h\xbd\xfc\x83\x97^\x176>\xaf\x00@\x06\x85\xbe\xa3]Y\xff\\\x833\x11@\x96G\xdaA\xd852b<&=\xa0B\xfd\xcb\xd0\xa6H\xb5\x92%s\xa0@\x19\xab\xbd\xdc\xe9\xf4\x0c\x95Kn\xd7o\xb2\x98\xee\xeb\xf91\xd6QGkp2\xca3\xb6\x14\xcf\xa5\x95\x11U\x0e\xceh\xc6=\xbcK9S\x91\x0e\x1a%?\x8d\x01U\x01\xfc~\x16\x9cP\x84U\x99\x06\xed\x13\xbe\xe7\xbc\xf8\xec\xf9\xb4Hq\xb4\xd9\xdeZ\xe1\xf0\x94z\")\x85\x1c\xed\x85R\xf3I\xa7(\r\xf0\xa47W\xb0\x01\x99\xd6\xa5|RTvb\x9fo\xb8x+\x9ch\xee\x8c\x88@\xb5\x1a\xf1\xe2\x8e\xb9\x12++e\xa6)\x19\xf7\xb4l\xa4<\xa7\x85\xf5\xdb\x08\x17%\x11S\x8c\xe1\r\xfb\xc7\xa9\xc23\xa2\xff\xc6\xbd\xf6]p\xdbV\xb8\xc0j\xaa\x87Ef@\xa3x\x81O\x1d\x82\xff\xccykJ\x1f>\xcb\x11V\x0fw\xbb7-\xadp\xdf\xf2\x07\x1fj\xf3\xaavmU\x11\xfb:\x8a\xcby\xc0\xb90\t\xd8 \x0e\x1e\xae\xda\xe0\x9dB\xff+\xb0f=\xb5P*\x97w\x13\x13+.\xd1\xa5\xf3U\x0b>t\x91t@\xaf\xe6\x8d\x8cp\x8bE\x02(\x16\x19\x86\x88\xa1\xe7\x18\xd0b<\x8ch\xa0\xecU\xcc\xf1\xf6\n\x0f\x10w3\x86\x9e=\x16\xdb\x8b\xcd\xf9/`\x86\x9b}\xc1\x91\xd2~\xe7\x9b\x80\xc0\xc5\x0f\xd7\xffp`\xb7\xdc\xb3\xa1\xe3\x0e\xfe\x97\x85\xfd\xbe\x18\x0b|\xb5\x0fI9\xea\x8b9_y\xfb\xfb\xc1\x06A)h\x9bCAi\xdey\x07N8\x0c\xea\xc7O\xf5hS\xa0\xa3\xba\xe9J\xbb6\x00\x98%`\x03\x9ak-\x06t\x9c\xb3\xde\xa8\x96\xb2]\xd0\xff\xb1\xb1\xf3\x11M/\xe3Z^\xd6T[\x19\xc2l\xa5\x0e\xb3\xe8m0\xa0k$\xb7\xf6\"\xf7\xdf\xa0\x92\xab\xca4\xf9\xc0\xe9\x9ce\x85\xa8\x80\xf9\xb5\xf7\xc5\xc1\xfc\x16v\xefW\xc8>D\xe5C^/\xf3\x0b+\xc1\xc7\x17\xff\xac\x9e'\xe6\x10F\x0e'7\xc5X\xfc?$t\x9d\x8e;I\x80\xf2\x93\xee\xff\x8e\xd8GLz\xab\x97GDQ8\xb0\xfeL\xef\x93\xcb\x82\xcf>g\xf6\"Y\\\x89\x97A\xe7\xde\xeew\xc9Z\x8bI\x05\x91&\xf4\x085!\xa1\xa7J0P\x16\x98\xafL^IAb\x07\x1f\xdc\x9fJ\x0bP\xe7\xf6t\xa1\x1cbpVb\x86Fg\x18\xb8\xa4#+H\x91\xb8\xb6\r,\xde\xcf\tx_\xf0\x95\xeaA\xc1(\x82g\x83p\x1cg\x95V\xa7\xfa{2c\x86\xc6\x13\x12\xe6\x18\xf9y\x9c&4\xe2\x9a\x89\xd1\xab\x9e\xaf\x95\xaan\xd7Pu6\xd2\x1c\xa7\x1a\x95\xc8\x88\x95\x03KJ\x99\xcf\xc1\xd3\xaa$r\x8b\x88k\xde\x17l\xfe\"\x9e\x901\x87\xa5\xab\xbb^N\xa9\xb1\x030\xe84\xbd\xad\x1b\xe1\x82\x10Sj\xcf[m9\x9dV\x16=\xec\x8d\xc8>\xc7\xa3\xbav\\\x0fN\xd8\x07\x17\x99\xa3?\xdc[\rt4\x15\xa2#\xdb\x0b^\x83\x83\xcb\x96\x0eH4\x99\xe9\xb0\xf9U-s\xe87~\xfd\x92V\x16KB\x9an,\xfa\x01\xf7\xce\xc4'\x17t\xfd\xe3";

        private byte[] getKey()
        {
            var key = new byte[16];

            var i_c2 = new int[] { 281, 679, 919, 500, 179, 489, 379, 98, 321, 920, 885, 343, 285, 50, 639, 969 };

            var i2_c2 = new int[] { 3, 3, 1, 3, 0, 1, 2, 2, 2, 0, 3, 1, 0, 2, 0, 1 };

            var ks_c2 = new byte[ks_c2_char.Length];
            //for (var i = 0; i < ks_c2_char.Length; i++)
            //{
            //    ks_c2[i] = Convert.ToByte(ks_c2_char[i]);
            ks_c2 = Encoding.Unicode.GetBytes(ks_c2_char);
            //}

            var tkey = new byte[16];
            for (var j = 0; j < 16; j++)
            {
                tkey[j] = ks_c2[i_c2[j] + i2_c2[j]];
            }

            Array.Copy(tkey, 8, key, 0, 8);
            //copy(key[0:8], tkey[8:16])
            Array.Copy(tkey, 4, key, 8, 4);
            //copy(key[8:12], tkey[4:8])
            Array.Copy(tkey, 0, key, 12, 4);
            //copy(key[12:16], tkey[0:4])

            return key;
        }

        public string decryptResponse(string msg)
        {
            //var decodedText = Convert.FromBase64String(System.Text.Encoding.Default.GetString(msg));
            var decodedText = Convert.FromBase64String(msg);

            return Decrypt(decodedText);
        }

        public string Decrypt(byte[] msg)
        {
            var key = getKey();
            return decrypt(msg, key);
        }

        public string decrypt(byte[] msg, byte[] key)
        {
            using (var d = new System.Security.Cryptography.AesCryptoServiceProvider())
            {
                var iv = Enumerable.Repeat((byte)0, 16).ToArray();
                d.IV = iv;
                d.Key = key;
                d.Mode = CipherMode.CBC;
                d.Padding = PaddingMode.None;

                var t = d.CreateDecryptor();

                using (var ms = new System.IO.MemoryStream(msg))
                {
                    using (var cs = new CryptoStream(ms, t, CryptoStreamMode.Read))
                    {
                        using (var sr = new System.IO.StreamReader(cs))
                        {
                            var r = sr.ReadToEnd();
                            return r;
                        }
                    }
                }

            }
        }
    }
}
